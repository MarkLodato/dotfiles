# An improved version of incarg.  ^X^A / ^X^X operate like Vim's ^A / ^X,
# incrementing the closest decimal number under or to the right of the cursor,
# except that if there is no such number, falls back to looking to the left of
# the cursor, too.
#
# Usage:
#   autoload -U increment-number
#   zle -N increment-number
#   bindkey '^X^A' increment-number
#   bindkey -s '^X^X' '^[-^X^A'
#
# TODO: Should I also move the cursor like Vim?
setopt LOCAL_OPTIONS EXTENDED_GLOB NO_KSH_ARRAYS
local -a match mbegin mend
local begin end
if [[ $BUFFER[CURSOR+1] == [0-9] ]]; then
  begin=$((CURSOR+1))
  end=$((CURSOR+1))
  [[ $LBUFFER == (*[^0-9]|)(#b)([0-9]##) ]] && begin=$(( mbegin[1] ))
  [[ $RBUFFER == (#b)([0-9]##)* ]] && end=$(( ${#LBUFFER} + mend[1] ))
elif [[ $RBUFFER == [^0-9]#(#b)([0-9]##)* ]]; then
  begin=$(( ${#LBUFFER} + mbegin[1] ))
  end=$(( ${#LBUFFER} + mend[1] ))
elif [[ $LBUFFER == (*[^0-9]|)(#b)([0-9]##)[^0-9]# ]]; then
  begin=$(( mbegin[1] ))
  end=$(( mend[1] ))
fi
if [[ -n $begin ]]; then
  local orig=${BUFFER[begin,end]}
  local new=$(( orig + ${NUMERIC:-1} ))
  if (( $new < 0 )); then
    # Don't go negative.  We do not read negative numbers because we often
    # have, for example, 'foo-001.png', in which case we would not want to
    # treat "001" as negative.
  elif [[ $orig == 0* ]]; then
    # Preserve leading zeros.
    BUFFER[begin,end]=$(printf '%0*d' ${#orig} $new )
  else
    # Do not preserve leading zeros if none were present originally.
    BUFFER[begin,end]=$new
  fi
fi
# vim: sw=2 sts=2 et ft=zsh:
